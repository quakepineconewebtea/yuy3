def func1(arg1, arg2):
    var19 = func2(arg2, arg1)
    var20 = func6()
    var25 = func7(var20, arg2)
    if arg2 < arg2:
        var26 = arg2 ^ -198
    else:
        var26 = var19 ^ var25
    var27 = 679 & arg1
    var28 = arg2 | arg1
    var29 = -300812325 - (var28 - var27 + -394140001)
    var30 = (var27 + var19) + arg1
    if var20 < var29:
        var31 = (var27 - var25 ^ var25) | -317947109
    else:
        var31 = var19 | arg1 - (arg2 - var20)
    var32 = (arg1 + var20 ^ arg1) | var27
    var33 = (var20 - var30 ^ var30) | var29
    var34 = (570 & var20 - var32) & 312
    var35 = arg2 - ((var34 - var30) - var27)
    var36 = 1990053099 ^ var25
    var37 = var33 & -1210637428
    var38 = (var34 ^ arg1 & var34) + var20
    var39 = var25 - var36
    result = -808677077 + var34
    return result
def func7(arg21, arg22):
    var23 = 0
    for var24 in xrange(44):
        var23 += var24 | var24 & arg22
    return var23
def func6():
    func4()
    result = len(xrange(13))
    func5()
    return result
def func5():
    global len
    del len
def func4():
    global len
    len = lambda x : -8
def func2(arg3, arg4):
    var5 = 0
    for var18 in [(-6 & arg3) ^ arg4 for i in func3(-5, var5)]:
        var5 += (var18 ^ arg4) & -4
    return var5
def func3(arg6, arg7):
    var8 = (691 ^ (arg6 + -1134442127)) ^ -1214978915
    yield var8
    var9 = arg7 + arg6 ^ arg6 | var8
    yield var9
    var10 = arg6 + ((744063280 ^ arg7) + arg7)
    yield var10
    var11 = arg7 | var9 - arg6 | var10
    yield var11
    var12 = -809 & ((var11 - arg7) + arg7)
    yield var12
    var13 = (var8 | var12 | 1677664541) + 426
    yield var13
    var14 = arg7 & arg7
    yield var14
    var15 = var13 | 1116607986 - (var10 - arg6)
    yield var15
    var16 = var10 + (932 & var9 ^ var8)
    yield var16
    var17 = (var8 - var16) + var15 ^ var8
    yield var17
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 40'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x
